#!/usr/bin/env ruby

require 'clamp'
require 'fileutils'

SIGSTORE_CACHE_DIR = File.expand_path("~/.cache/sigstore")

FULCIO_ROOT =<<EOS
-----BEGIN CERTIFICATE-----
MIIB9zCCAXygAwIBAgIUALZNAPFdxHPwjeDloDwyYChAO/4wCgYIKoZIzj0EAwMw
KjEVMBMGA1UEChMMc2lnc3RvcmUuZGV2MREwDwYDVQQDEwhzaWdzdG9yZTAeFw0y
MTEwMDcxMzU2NTlaFw0zMTEwMDUxMzU2NThaMCoxFTATBgNVBAoTDHNpZ3N0b3Jl
LmRldjERMA8GA1UEAxMIc2lnc3RvcmUwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAAT7
XeFT4rb3PQGwS4IajtLk3/OlnpgangaBclYpsYBr5i+4ynB07ceb3LP0OIOZdxex
X69c5iVuyJRQ+Hz05yi+UF3uBWAlHpiS5sh0+H2GHE7SXrk1EC5m1Tr19L9gg92j
YzBhMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRY
wB5fkUWlZql6zJChkyLQKsXF+jAfBgNVHSMEGDAWgBRYwB5fkUWlZql6zJChkyLQ
KsXF+jAKBggqhkjOPQQDAwNpADBmAjEAj1nHeXZp+13NWBNa+EDsDP8G1WWg1tCM
WP/WHPqpaVo0jhsweNFZgSs0eE7wYI4qAjEA2WB9ot98sIkoF3vZYdd3/VtWB5b9
TNMea7Ix/stJ5TfcLLeABLE4BNJOsQ4vnBHJ
-----END CERTIFICATE-----
EOS

#######################################################
# Cache of keys and signed certs
#######################################################

class SigstoreCache

  def initialize(path)
    @path = path
    FileUtils.mkdir_p(SIGSTORE_CACHE_DIR)
    clean_expired
  end

  def fetch
    now_epoch = Time.now.to_i
    current_cache = Dir.entries(@path).select { |entry|
      entry.match(/\A\d+-\d+\z/)
    }.select { |entry|
      entry.split("-").last.to_i > now_epoch
    }.sort.last

    if current_cache
      this_path = File.join(@path, current_cache)

      priv_key_path = File.join(this_path, "private.key")
      cert_path = File.join(this_path, "sigstore.crt")
      root_cert_path = File.join(this_path, "sigstore-root.crt")

      priv_key = OpenSSL::PKey::RSA.new(File.read(priv_key_path))
      certToSign = OpenSSL::X509::Certificate.new(File.read(cert_path))
      rootCert = OpenSSL::X509::Certificate.new(File.read(root_cert_path))

      return priv_key, certToSign, rootCert
    end
  end

  def store(priv_key, cert, root_cert)
    raise ArgumentError, "priv_key (#{priv_key.class}) must be an OpenSSL::PKey" unless priv_key.is_a?(OpenSSL::PKey::RSA)
    raise ArgumentError, "cert (#{cert.class}) must be an OpenSSL::X509::Certificate" unless cert.is_a?(OpenSSL::X509::Certificate)
    raise ArgumentError, "root_cert (#{root_cert.class}) must be an OpenSSL::X509::Certificate" unless root_cert.is_a?(OpenSSL::X509::Certificate)

    # We expire data from the cache 60s before the certificate expires. In theory this should
    # avoid race conditions where the cert is valid when we fetch it from the cache, but invalid
    # when it signs the commit
    from_epoch = cert.not_before.to_i
    to_epoch = cert.not_after.to_i - 60

    this_path = File.join(@path, "#{from_epoch}-#{to_epoch}")
    FileUtils.mkdir_p(this_path)

    priv_key_path = File.join(this_path, "private.key")
    cert_path = File.join(this_path, "sigstore.crt")
    root_cert_path = File.join(this_path, "sigstore-root.crt")
    File.open(priv_key_path, "wb") do |io|
      io.write(priv_key.to_pem)
    end
    File.open(cert_path, "wb") do |io|
      io.write(cert.to_pem)
    end
    File.open(root_cert_path, "wb") do |io|
      io.write(root_cert.to_pem)
    end
    FileUtils.chmod(0600, priv_key_path)
    FileUtils.chmod(0600, cert_path)
    FileUtils.chmod(0600, root_cert_path)
  end

  private

  def clean_expired
    now_epoch = Time.now.to_i
    current_cache = Dir.entries(@path).select { |entry|
      entry.match(/\A\d+-\d+\z/)
    }.select { |entry|
      entry.split("-").last.to_i <= now_epoch
    }.each { |entry|
      FileUtils.rm_r(File.join(@path, entry))
    }
  end
end
#######################################################
# Crypto
#######################################################
require 'base64'
require 'openssl'

class Crypto
  def initialize; end

  def generate_keys
    key = OpenSSL::PKey::RSA.generate(2048)
    pkey = key.public_key
    return [key, pkey, Base64.encode64(pkey.to_der)]
  end

  def sign_proof(priv_key, email)
    proof = priv_key.sign(OpenSSL::Digest::SHA256.new, email)
    return Base64.encode64(proof)
  end
end

#######################################################
# OpenIDHandler
#######################################################

require 'base64'
require 'cgi'
require 'digest'
require 'json/jwt'
require "launchy"
require "openid_connect"

class OpenIDHandler
  def initialize(priv_key)
    @priv_key = priv_key
  end

  def get_token()
    #config = SigStoreConfig.new().config
    session = {}
    session[:state] = SecureRandom.hex(16)
    session[:nonce] = SecureRandom.hex(16)
    oidc_discovery = OpenIDConnect::Discovery::Provider::Config.discover! "https://oauth2.sigstore.dev/auth"

    # oidc_discovery gem doesn't support code_challenge_methods yet, so we will just blindly include
    pkce = generate_pkce

    # If development env, used a fixed port
    #if config.development  == true
    #  server = TCPServer.new 5678
    #  server_addr = "5678"
    #else
      server = TCPServer.new 0
      server_addr = server.addr[1].to_s
    #end

    webserv = Thread.new do
      response = "You may close this browser"
      response_code = "200 OK"
      connection = server.accept
      while (input = connection.gets)
        begin
          # VERB PATH HTTP/1.1
          http_req = input.split(' ')
          if http_req.length() != 3
            raise "invalid HTTP request received on callback"
          end
          params = CGI.parse(URI.parse(http_req[1]).query)
          if params["code"].length() != 1 or params["state"].length() != 1
            raise "multiple values for code or state returned in callback; unable to process"
          end
          Thread.current[:code] = params["code"][0]
          Thread.current[:state] = params["state"][0]
        rescue StandardError => e
          response = "Error processing request: #{e.message}"
          response_code = "400 Bad Request"
        end
        connection.print "HTTP/1.1 #{response_code}\r\n" +
          "Content-Type: text/plain\r\n" +
          "Content-Length: #{response.bytesize}\r\n" +
          "Connection: close\r\n"
          connection.print "\r\n"
          connection.print response
          connection.close
          if response_code != "200 OK"
            raise response
          end
          break
      end
    ensure
      server.close
    end

    webserv.abort_on_exception = true

    client = OpenIDConnect::Client.new(
      authorization_endpoint: oidc_discovery.authorization_endpoint,
      identifier: "sigstore",
      redirect_uri: "http://localhost:" + server_addr,
      secret: "",
      token_endpoint: oidc_discovery.token_endpoint,
    )

    authorization_uri = client.authorization_uri(
      scope: ["openid", :email],
      state: session[:state],
      nonce: session[:nonce],
      code_challenge_method: pkce[:method],
      code_challenge: pkce[:challenge],
    )

    begin
      Launchy.open(authorization_uri)
    rescue
      # NOTE: ignore any exception, as the URL is printed above and may be
      #       opened manually
      puts "Cannot open browser automatically, please click on the link below:"
      puts ""
      puts authorization_uri
    end

    webserv.join

    # check state == webserv[:state]
    if webserv[:state] != session[:state]
      abort 'Invalid state value received from OIDC Provider'
    end

    client.authorization_code = webserv[:code]
    access_token = client.access_token!({code_verifier: pkce[:value]})

    provider_public_keys = oidc_discovery.jwks

    token = verify_token(access_token, provider_public_keys, session[:nonce])

    proof = Crypto.new().sign_proof(@priv_key, token["email"])
    return proof, access_token
  end

  private

  def generate_pkce()
    pkce = {}
    pkce[:method] = "S256"
    # generate 43 <= x <= 128 character random string; the length below will generate a 2x hex length string
    pkce[:value] = SecureRandom.hex(24)
    # compute SHA256 hash and base64-urlencode hash
    pkce[:challenge] = Base64.urlsafe_encode64(Digest::SHA256.digest(pkce[:value]), padding:false)
    return pkce
  end

  def verify_token(access_token, public_keys, nonce)
    begin
      decoded_access_token = JSON::JWT.decode(access_token.to_s,public_keys)
    rescue JSON::JWS::VerificationFailed => e
      abort 'JWT Verification Failed: ' + e.to_s
    else  #success
      token = JSON.parse(decoded_access_token.to_json)
    end
    #puts token.inspect

    # verify issuer matches
    if token["iss"] != "https://oauth2.sigstore.dev/auth"
      abort 'Mismatched issuer in OIDC ID Token'
    end

    # verify it was intended for me
    if token["aud"] != "sigstore"
      abort 'OIDC ID Token was not intended for this use'
    end

    # verify token has not expired (iat < now <= exp)
    now = Time.now.to_i
    if token["iat"] > now or now > token["exp"]
      abort 'OIDC ID Token is expired'
    end

    # verify nonce if present in token
    if token.key?("nonce") and token["nonce"] != nonce
      abort 'OIDC ID Token has incorrect nonce value'
    end

    # ensure that the OIDC provider has verified the email address
    # note: this may have happened some time in the past
    if token["email_verified"] != true
      abort 'Email address in OIDC token has not been verified by provider'
    end

    return token
  end
end

#######################################################
# HttpClient
#######################################################

require "faraday_middleware"
require "openssl"

class HttpClient
  def initialize; end
  def get_cert(id_token, proof, pub_key, fulcio_host)
    connection = Faraday.new do |request|
      request.request :authorization, 'Bearer', id_token.to_s
      request.url_prefix = fulcio_host
      request.request :json
      request.response :json, content_type: /json/
      request.adapter :net_http
    end
    fulcio_response = connection.post("/api/v1/signingCert", { publicKey: { content: pub_key, algorithm: "ecdsa" }, signedEmailAddress: proof})
    return fulcio_response.body
  end
end

#######################################################
# FulcioIssuedCertificate
#######################################################
class FulcioIssuedCertificate
  def initialize(cert)
    raise ArgumentError, "cert (#{cert.class}) must be an OpenSSL::X509::Certificate" unless cert.is_a?(OpenSSL::X509::Certificate)
    @cert = cert
  end

  def fingerprint
    OpenSSL::Digest::SHA1.new(@cert.to_der).to_s
  end

  def identity
    @cert.extensions.each do |ext|
      if ext.oid.to_s == "subjectAltName"
        return ext.value.to_s.sub(/\Aemail:/, "")
      end
    end
    nil
  end

  def identity_provider
    @cert.extensions.each do |ext|
      if ext.oid.to_s == "1.3.6.1.4.1.57264.1.1"
        return ext.value.to_s
      end
    end
    nil
  end
end

def execute_sign(file_descriptor_id: nil)
  cache = SigstoreCache.new(SIGSTORE_CACHE_DIR)

  File.open("sigstore-execute-sign.log", "wb") do |log|
    priv_key, certToSign, rootCert = cache.fetch
    if priv_key.nil? || certToSign.nil? || rootCert.nil?
      priv_key, pub_key, enc_pub_key = Crypto.new().generate_keys
      proof, access_token = OpenIDHandler.new(priv_key).get_token
      cert_response = HttpClient.new().get_cert(access_token, proof, enc_pub_key, "https://fulcio.sigstore.dev")
      certPEM, rootPem = cert_response.scan(/-----BEGIN CERTIFICATE-----.*?-----END CERTIFICATE-----/m)
      certToSign = OpenSSL::X509::Certificate.new(certPEM)
      rootCert = OpenSSL::X509::Certificate.new(rootPem)
      cache.store(priv_key, certToSign, rootCert)
    end

    status_fd = IO.for_fd(file_descriptor_id) if file_descriptor_id
    log.puts ARGV.inspect
    data_to_sign = STDIN.read(1048576)

    begin
      bundled_certs = [ rootCert ]
      signed = OpenSSL::PKCS7::sign(certToSign, priv_key, data_to_sign, bundled_certs, OpenSSL::PKCS7::DETACHED | OpenSSL::PKCS7::BINARY).to_s
    rescue StandardError => e
      log.puts "Signing failed: #{e}"
      exit 1
    end

    signed = signed.sub("-----BEGIN PKCS7-----", "-----BEGIN SIGNED MESSAGE-----")
    signed = signed.sub("-----END PKCS7-----", "-----END SIGNED MESSAGE-----")

    log.puts "BEGIN_SIGNING"
    log.puts "[GNUPG:] SIG_CREATED D \x01 \x02 0 #{Time.now.to_i} \x01\x01"
    log.puts signed

    log.flush

    status_fd.puts "BEGIN_SIGNING" if file_descriptor_id
    puts signed
    status_fd.puts "[GNUPG:] SIG_CREATED D \x01 \x02 0 #{Time.now.to_i} \x01\x01" if file_descriptor_id
  end
  # TODO confirm the commit author email matches the email we'll be signing with
rescue StandardError => e
  File.open("sigstore-execute-sign.log", "wb") do |log|
    log.puts("ERR: #{e}")
  end
end

#######################################################
# FulcioSignedCommit
#######################################################
class FulcioSignedCommit

  class Stage
    attr_reader :success, :message, :debug

    def initialize(success, message, debug)
      @success, @message, @debug = success, message, debug
    end

    def success?
      @success
    end

    def check_cross
      success? ? "✓" : "✖"
    end
  end

  class Result
    def initialize
      @stages = []
    end

    def add_stage(success, message, debug: nil)
      # TODO store debug and make it available somehow
      @stages << Stage.new(success, message, debug)
    end

    def success?
      @stages.all? { |stage| stage.success? }
    end

    def to_s
      str = ""
      @stages.each do |stage|
        str << "#{stage.check_cross} #{stage.message}" 
        str << " (#{stage.debug})" if stage.debug
        str << "\n"
      end
      str
    end

    def error_msg
      @error_msg
    end
  end

  def initialize(signature_data:, signed_data:)
    @signature_data, @signed_data = signature_data, signed_data

    pkcs7_text = signature_data.sub('-----BEGIN SIGNED MESSAGE-----', '')
    pkcs7_text = pkcs7_text.sub('-----END SIGNED MESSAGE-----', '')

    @p7 = OpenSSL::PKCS7.new(Base64.decode64(pkcs7_text))
  end

  def fingerprint
    signer_fulcio_certificate&.fingerprint
  end

  def identity
    signer_fulcio_certificate&.identity
  end

  def identity_provider
    signer_fulcio_certificate&.identity_provider
  end

  def signer_fulcio_certificate
    return nil if signer_certificate.nil?

    fulcio_cert = FulcioIssuedCertificate.new(signer_certificate)
  end

  def validate
    result = Result.new

    commit_epoch = @signed_data[/committer.+ (\d+)/, 1].to_i

    # Without a commit time we can't validate the commit, bail early
    if commit_epoch == 0
      result.add_stage(false, "Commit timestamp missing")
      return result
    end

    # If the certificate that goes with the private key that signed the commit isn't bundled
    # in, then we can proceed, bail early
    if signer_certificate.nil?
      result.add_stage(false, "Certificate for signature not found")
      return result
    end

    commit_time = Time.at(commit_epoch)

    cert_store = OpenSSL::X509::Store.new

    # This will load the CA's from our system. We don't want that, we only want to verify
    # against the sigstore root
    #cert_store.set_default_paths

    root_cert = OpenSSL::X509::Certificate.new(FULCIO_ROOT)
    cert_store.add_cert(root_cert)

    # Don't validate the time on any certificates. They'll almost certainly have expired,
    # because fulcio certificates are only valid for 20 minutes. We'll do our own check
    # to confirm the commit time is within the certificate validity period
    cert_store.flags = OpenSSL::X509::V_FLAG_NO_CHECK_TIME

    # Certificates issued by fulcio have a specific usage indicated via extensions:
    #
    # $ openssl x509 -in cert-mine.pem -noout -text | head -n 39 | tail -n 5
    #    X509v3 extensions:
    #        X509v3 Key Usage: critical
    #            Digital Signature
    #        X509v3 Extended Key Usage:
    #            Code Signing
    #
		# By default openssl doesn't consider these usages valid for PKCS7 signatures,
    # so verify() will fail with an obscure error. By forcing the cert store purpose
    # to ANY, verify() will ignore the usage extension when determining certificate validity
    cert_store.purpose = OpenSSL::X509::PURPOSE_ANY


    # verify the signature has signed the commit, but don't check the key that did the signature
    # has been signed by a trusted CA
    valid = @p7.verify([], cert_store, @signed_data, OpenSSL::PKCS7::DETACHED | OpenSSL::PKCS7::NOVERIFY)
    if valid
      result.add_stage(valid, "Signature confirms commit is unchanged")
    else
      result.add_stage(valid, "Signature confirms commit is unchanged", debug: @p7.error_string)
    end

    valid_time = @p7.signers.first.signed_time.between?(signer_certificate.not_before, signer_certificate.not_after) &&
      @p7.signers.first.signed_time >= commit_time
    result.add_stage(valid_time, "Commit time is within certificate valid period")

    valid = @p7.verify([], cert_store, @signed_data, OpenSSL::PKCS7::DETACHED)
    if valid
      result.add_stage(valid, "Signature created by sigstore issued certificate")
    else
      result.add_stage(valid, "Signature created by sigstore issued certificate", debug: @p7.error_string)
    end

    result
  end

  def validate_and_check(require_email_domain: nil, require_identity_provider: nil)
    # First we do the standard checks to confirm the signature and trust chain is valid
    result = validate

    result.add_stage(!identity.nil?, "Signature identity: #{identity}")
    result.add_stage(!identity_provider.nil?, "Signature identity provider: #{identity_provider}")

    # Now we can go on make the users assertions against the validated identity
    if require_email_domain
      valid = identity && identity.ends_with?("@#{require_email_domain}")
      result.add_stage(valid, "Signature by user at @#{require_email_domain}")
    end

    if require_identity_provider
      valid = identity_provider && identity_provider == require_identity_provider
      result.add_stage(valid, "Identity provider is #{require_identity_provider}")
    end

    result
  end


  private

  def signer_certificate
    @signer_certificate ||= begin
                             res = nil
                             @p7.certificates.each do |cert|
                               res = cert if cert.serial == @p7.signers.first.serial
                             end
                             res
                           end
  end
end


def execute_verify(signed_data_path: nil, signature_path: nil, file_descriptor_id: nil)
  raise ArgumentError, "signed_data_path is required" if signed_data_path.nil?
  raise ArgumentError, "signature_path is required" if signature_path.nil?

  require 'openssl'
  require 'base64'
  File.open("sigstore-execute-verify.log", "wb") do |log|
    status_fd = IO.for_fd(file_descriptor_id) if file_descriptor_id

    log.puts("signed_data_path: #{signed_data_path}")
    log.puts("signature_path: #{signature_path}")

    signed_data = if signed_data_path == "-"
                    STDIN.read(1048576)
                  else
                    File.read(signed_data_path)
                  end
    signature_data = if signature_path == "-"
                       STDIN.read(1048576)
                     else
                       File.read(signature_path)
                     end

    signed_commit = FulcioSignedCommit.new(signature_data: signature_data, signed_data: signed_data)
    result = signed_commit.validate

    log.puts result.to_s

    # TODO verify certificate hasn't been revoked - not on CRL
    # gitlab has some useful code we can probably use for inspiration https://gitlab.com/gitlab-org/gitlab/-/merge_requests/17773/diffs

    if file_descriptor_id
      if result.success?
        status_fd.puts "\n[GNUPG:] GOODSIG #{signed_commit.fingerprint} #{signed_commit.identity} (#{signed_commit.identity_provider})"
      else
        status_fd.puts "\n[GNUPG:] BADSIG #{signed_commit.fingerprint} #{signed_commit.identity} (#{signed_commit.identity_provider})"
      end
    end

  rescue StandardError => e
    log.puts("ERR: #{e}")
  end
end

def execute_check(email_domain:, identity_provider:)
  data = STDIN.read(1048576)
  start_at = data.index("-----BEGIN SIGNED MESSAGE-----")
  end_at = data.index("-----END SIGNED MESSAGE-----")

  File.open("sigstore-execute-check.log", "wb") do |log|

    if start_at.nil?
      $stderr.puts "No signature found"
      exit 1
    end

    if end_at.nil?
      $stderr.puts "No signature close found"
      exit 1
    end

    end_at = end_at + 28
    pkcs7_text = data[start_at, end_at - start_at]
    signed_text = data.sub("gpgsig #{pkcs7_text}\n", "")

    signed_commit = FulcioSignedCommit.new(signature_data: pkcs7_text, signed_data: signed_text)
    result = signed_commit.validate_and_check(require_email_domain: email_domain, require_identity_provider: identity_provider)

    puts result.to_s

    if result.success?
      puts "OK"
    else
      puts "FAIL"
      exit 1
    end

  rescue StandardError => e
    log.puts("ERR: #{e}")
  end

  # TODO implement "--signed-identity-must-match-committer-email"
end

#######################################################
# Time to run something
#######################################################
Clamp do
  option "--status-fd", "N", "write status messages to this file descriptor" do |fd|
    Integer(fd) if fd
  end
  option "--verify", :flag, "verify a signature", default: false
  option ["-s","--sign"], :flag, "Sign a message", default: true
  option "--check", :flag, "check a commit", default: false
  option ["-b","--detached"], :flag, "Make a detached signature", default: false
  option ["-a","--armor"], :flag, "ASCII armoured", default: false
  option ["-u","--user"], "key-id", "Use name as the key to sign with", default: false

  option "--email-domain", "domain", "Confirm the commit is signed by someone from this domain"
  option "--identity-provider", "url", "Confirm the commit is signed by an identity from this provider. Usually a URL"

  parameter "[input_one]", "optional input file for some commands"
  parameter "[input_two]", "optional input file for some commands"

  def execute
    begin
      if verify?
        # gpgsm --verify $file - <$signature
        execute_verify(file_descriptor_id: status_fd, signed_data_path: input_two, signature_path: input_one)
      elsif check?
        # git cat-file commit HEAD | sigstore --check --email-domain yob.id.au  --issuer https://accounts.google.com
        execute_check(email_domain: email_domain, identity_provider: identity_provider)
      elsif sign?
        # gpgsm -bsau $key
        execute_sign(file_descriptor_id: status_fd)
      else
        $stderr.puts "no command found"
        exit 1
      end
    rescue StandardError => e
      File.open("sigstore-clamp.log", "wb") do |log|
        log.puts("ERR: #{e}")
      end
    end
  end

end
